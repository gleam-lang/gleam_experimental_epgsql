-module(gleam_epgsql_test).
-compile(no_auto_import).

-export([library_test/0]).

library_test() ->
    {ok,
     Conn} = gleam_epgsql:start_link([{host, <<"localhost">>},
                                      {username, <<"postgres">>},
                                      {password, <<"postgres">>},
                                      {database, <<"gleam_epgsql_test">>}]),
    expect:equal(gleam_epgsql:query(Conn, <<"select 1;">>, []),
                 {ok, [any:from({1})]}),
    expect:equal(gleam_epgsql:query(Conn, <<"select 1, 2, 3, 4;">>, []),
                 {ok, [any:from({1, 2, 3, 4})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT $1::REAL">>,
                                    [gleam_epgsql:float(2.5)]),
                 {ok, [any:from({2.5})]}),
    Error = {pg_error,
             #{}#{extra => [{file, <<"scan.l">>},
                            {line, <<"1128">>},
                            {position, <<"1">>},
                            {routine, <<"scanner_yyerror">>},
                            {severity,
                             <<"ERROR">>}]}#{severity => error}#{message => <<"syntax error at or near \"syntax\"">>}#{codename => atom:create_from_string(<<"syntax_error">>)}#{code => <<"42601">>}},
    expect:equal(gleam_epgsql:query(Conn, <<"syntax error">>, []),
                 {error, Error}),
    expect:equal(gleam_epgsql:query(Conn, <<"DELETE FROM cats;">>, []),
                 {ok, []}),
    expect:equal(gleam_epgsql:query(Conn, <<"SELECT * FROM cats;">>, []),
                 {ok, []}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"INSERT INTO cats (id, name, is_cute) VALUES
  (1, 'Nubi', true),
  (2, 'Ginny', true);">>,
                                    []),
                 {ok, []}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT * FROM cats WHERE id = 1;">>,
                                    []),
                 {ok, [any:from({1, <<"Nubi">>, true})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT name FROM cats ORDER BY id;">>,
                                    []),
                 {ok, [any:from({<<"Nubi">>}), any:from({<<"Ginny">>})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"INSERT INTO cats VALUES (3, 'Mister Bigglesworth', $1)">>,
                                    [gleam_epgsql:bool(false)]),
                 {ok, []}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT name FROM cats WHERE is_cute = $1;">>,
                                    [gleam_epgsql:bool(false)]),
                 {ok, [any:from({<<"Mister Bigglesworth">>})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT name FROM cats WHERE is_cute = $1 AND id > $2;">>,
                                    [gleam_epgsql:bool(true),
                                     gleam_epgsql:int(2)]),
                 {ok, []}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT name FROM cats WHERE is_cute = $1 AND id > $2;">>,
                                    [gleam_epgsql:bool(true),
                                     gleam_epgsql:int(1)]),
                 {ok, [any:from({<<"Ginny">>})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"UPDATE cats SET is_cute = $1">>,
                                    [gleam_epgsql:bool(true)]),
                 {ok, []}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT is_cute FROM cats WHERE id = 3">>,
                                    []),
                 {ok, [any:from({true})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"UPDATE cats SET is_cute = NOT is_cute WHERE id = 3 RETURNING is_cute">>,
                                    []),
                 {ok, [any:from({false})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"SELECT is_cute FROM cats WHERE id = 3">>,
                                    []),
                 {ok, [any:from({false})]}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"UPDATE cats SET is_cute = NOT is_cute WHERE id = 3">>,
                                    [gleam_epgsql:string(<<"hi there">>)]),
                 {error,
                  {incorrect_number_of_params,
                   #{}#{given => 1}#{expected => 0}}}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"UPDATE cats SET is_cute = $1 WHERE id = $2">>,
                                    [gleam_epgsql:string(<<"hi there">>)]),
                 {error,
                  {incorrect_number_of_params,
                   #{}#{given => 1}#{expected => 2}}}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"UPDATE cats SET is_cute = $1 WHERE id = $2 OR id = $3">>,
                                    [gleam_epgsql:string(<<"hi there">>)]),
                 {error,
                  {incorrect_number_of_params,
                   #{}#{given => 1}#{expected => 3}}}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"UPDATE cats SET is_cute = $1 WHERE id = $2 OR id = $3">>,
                                    []),
                 {error,
                  {incorrect_number_of_params,
                   #{}#{given => 0}#{expected => 3}}}),
    expect:equal(gleam_epgsql:query(Conn,
                                    <<"UPDATE cats SET is_cute = NOT is_cute WHERE id = $1">>,
                                    [gleam_epgsql:string(<<"hi there">>),
                                     gleam_epgsql:bool(true),
                                     gleam_epgsql:int(4)]),
                 {error,
                  {incorrect_number_of_params,
                   #{}#{given => 3}#{expected => 1}}}).
